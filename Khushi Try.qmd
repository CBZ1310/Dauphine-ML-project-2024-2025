---
title: "Khushi Try"
format: html
editor: visual
---

## Libraries

```{r}
#| message: false
#| warning: false
library(vroom)
library(here)
here::i_am("Dauphine-ML-project-2024-2025.Rproj")
library(dplyr)
library(ggplot2)
library(naniar) ##missing values
library(cowplot) ##for combining graphs
library(mice, warn.conflicts = FALSE)
library(purrr)

```

# Learn

## Data Loading

```{r}
#| message: false
#| warning: false
learn <- vroom(here("Data - source", "project-10-files", "learn_dataset.csv"), delim = ",", show_col_types = FALSE)
emp_type <- vroom(here("Data - source", "project-10-files", "learn_dataset_emp_type.csv"), delim = ",", show_col_types = FALSE)
job <- vroom(here("Data - source", "project-10-files", "learn_dataset_job.csv"), delim = ",", show_col_types = FALSE)
retired_former <- vroom(here("Data - source", "project-10-files", "learn_dataset_retired_former.csv"), delim = ",", show_col_types = FALSE)
retired_jobs <- vroom(here("Data - source", "project-10-files", "learn_dataset_retired_jobs.csv"), delim = ",", show_col_types = FALSE)
retired_pension <- vroom(here("Data - source", "project-10-files", "learn_dataset_retired_pension.csv"), delim = ",", show_col_types = FALSE)
sports <- vroom(here("Data - source", "project-10-files", "learn_dataset_sport.csv"), delim = ",", show_col_types = FALSE)

city_adm <- vroom(here("Data - source", "project-10-files", "city_adm.csv"), delim = ",", show_col_types = FALSE)

city_loc <- vroom(here("Data - source", "project-10-files", "city_loc.csv"), delim = ",", show_col_types = FALSE)

city_pop <- vroom(here("Data - source", "project-10-files", "city_pop.csv"), delim = ",", show_col_types = FALSE)

departments <- vroom(here("Data - source", "project-10-files", "departments.csv"), delim = ",", show_col_types = FALSE)

regions <- vroom(here("Data - source", "project-10-files", "regions.csv"), delim = ",", show_col_types = FALSE)
```

### Stratify or Not?

```{r}
target_counts <- table(learn$target)
target_proportions <- prop.table(target_counts)
target_df <- as.data.frame(target_proportions)
colnames(target_df) <- c("Target", "Proportion")


ggplot(target_df, aes(x = Target, y = Proportion, fill = Target)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::percent) +
  labs(
    title = "Proportion of Each Target Value",
    x = "Target Value",
    y = "Proportion"
  ) +
  theme_minimal()
```

**Because the response variable is a bit imbalanced, we will use stratify sampling. But it is not that serious so we don't need up-sampling or down-sampling**

## Combining Learn Data

```{r}
learn <- learn %>%
  left_join(emp_type, by = "PRIMARY_KEY") |>
  left_join(job, by = "PRIMARY_KEY") |>
  left_join(retired_former, by = "PRIMARY_KEY") |>
  left_join(retired_jobs, by = "PRIMARY_KEY") |>
  left_join(retired_pension, by = "PRIMARY_KEY") |>
  left_join(sports, by = "PRIMARY_KEY") |>
  left_join(city_adm, by = "INSEE") |>
  left_join(city_pop, by = "INSEE") |>
  left_join(departments, by = "DEP") |>
  
  mutate(TYPE_CONTRACT = ifelse(is.na(TYPE_OF_CONTRACT.x), TYPE_OF_CONTRACT.y, TYPE_OF_CONTRACT.x)) |>
  select(-TYPE_OF_CONTRACT.x, -TYPE_OF_CONTRACT.y) |>
  
  mutate(Working_hours = ifelse(is.na(Working_hours.x), Working_hours.y, Working_hours.x)) |>
  select(-Working_hours.x, -Working_hours.y) |>
  
    mutate(Work_condition = ifelse(is.na(Work_condition.x), Work_condition.y, Work_condition.x)) |>
  select(-Work_condition.x, -Work_condition.y) |>
  
  mutate(company_category = ifelse(is.na(company_category.x), company_category.y, company_category.x)) |>
  select(-company_category.x, -company_category.y) |>
  
  mutate(ECO_SECT = ifelse(is.na(ECO_SECT.x), ECO_SECT.y, ECO_SECT.x)) |>
  select(-ECO_SECT.x, -ECO_SECT.y) |>
  
  mutate(job_desc = ifelse(is.na(job_desc.x), job_desc.y, job_desc.x)) |>
  select(-job_desc.x, -job_desc.y) |>
  
  mutate(employee_count = ifelse(is.na(employee_count.x), employee_count.y, employee_count.x)) %>%
  select(-employee_count.x, -employee_count.y) |>
  
  mutate(Job_dep = ifelse(is.na(Job_dep.x), Job_dep.y, Job_dep.x)) |>
  select(-Job_dep.x, -Job_dep.y) |>
  
  mutate(job_category = ifelse(is.na(job_category.x), job_category.y, job_category.x)) |>
  select(-job_category.x, -job_category.y)
```

### Missing Values

```{r}
miss_learn <- gg_miss_var(learn, show_pct = TRUE) +
  theme_minimal() +
  labs(title = "Missing Data in Learn Dataset")

miss_learn
```

### Retirement Pay

```{r}
min(learn$retirement_age, na.rm = TRUE)
```

```{r}
minimum_retirement_age <- 36 
official_retirement_age <- 62 

retirement_check <- learn |> 
  mutate(
    is_retired = ifelse(AGE_2019 >= minimum_retirement_age, TRUE, FALSE), 
    valid_retirement_age = case_when(
      is_retired & !is.na(retirement_age) ~ "Retired with valid age",
      is_retired & is.na(retirement_age)  ~ "Retired without age",
      !is_retired & is.na(retirement_age) ~ "Not retired, no age (valid)",
      !is_retired & !is.na(retirement_age) ~ "Not retired, has age (invalid)"
    )
  )

missing_retirement_age <- retirement_check |> 
  filter(AGE_2019 >= official_retirement_age, is.na(retirement_age)) |> 
  summarize("individuals aged 62 or older without a reported retirement age" = n())

print(missing_retirement_age)


```

The pension is calculated on three factors:

-   Average Yearly Income for 25 best-earning years
-   payment rate
-   total length of insurance, including periods credited as periods of insurance

There are also different organsiations for departments [more detail here](https://www.cleiss.fr/docs/regimes/regime_france/an_3.html). Bit of literature also shows difference in retirees income in mainland France and whole [population](https://www.connexionfrance.com/magazine/profile-of-retirees-in-france-and-their-pensions-with-comparison-to-uk-and-us/697013).

For NA values I am trying to predict retirement pay based on variables in our data that can be possible proxies for above factors.

| Factors                 | Proxies                                                 |
|-----------------------|-------------------------------------------------|
| Income                  | `LAST_JOB_42` `last_emp_type` `JOB_42` `retirement_age` |
| Departmental difference | `INSEE` `DEP`                                           |

Adding filters for minimium retirement age noted, student and job status.

```{r}
# Subset Data for Imputation
impute_columns <- c("Retirement_pay", "LAST_JOB_42", "last_emp_type", "retirement_age", "INSEE", "JOB_42", "DEP", "Studying")
impute_data <- learn[, impute_columns] |>
  as_tibble() |>
  filter(retirement_age >= 36, Studying==FALSE, JOB_42 %in% c("csp_7_1", "csp_7_2", "csp_7_4", "csp_7_5", "csp_7_7", "csp_7_8", "csp_8_5", "csp_8_6"))

# Set up MICE Imputation
method <- make.method(impute_data)
method["Retirement_pay"] <- "rf"
method["LAST_JOB_42"] <- "polyreg"
method["last_emp_type"] <- "polyreg"

predictor_matrix <- make.predictorMatrix(impute_data)
predictor_matrix[, "Retirement_pay"] <- 0 

# Perform Imputation
set.seed(123)
imputed_data <- mice(impute_data, method = method, predictorMatrix = predictor_matrix, m = 1, maxit = 10)

# Extract Completed Data
library(mice)

completed_data <- complete(imputed_data)
completed_data <- completed_data |> 
  select(INSEE, Retirement_pay)


# Ensure there's an identifier column to match rows
learn <- learn |> 
  left_join(completed_data, by = "INSEE") |> 
  mutate(Retirement_pay = coalesce(Retirement_pay.y, Retirement_pay.x)) |> 
  select(-Retirement_pay.x, -Retirement_pay.y)

# Update Dataset with Imputed Values
#learn$Retirement_pay <- completed_data$Retirement_pay
#learn$LAST_JOB_42 <- completed_data$LAST_JOB_42
#learn$last_emp_type <- completed_data$last_emp_type
```

```{r}
gg_miss_var(learn, show_pct = TRUE) 
```

above graph to see again Retirement_pay after imputation.

### EMP Data

```{r}

```

### missing values – each data

```{r}
p1 <- gg_miss_var(emp_type)
p2 <- gg_miss_var(job)
p3 <- gg_miss_var(retired_former)
p4 <- gg_miss_var(retired_jobs)
p5 <- gg_miss_var(retired_pension)
p6 <- gg_miss_var(sports)

missing_values_plot <- plot_grid(p2, p4, ncol = 2, labels = c('job', 'retired_jobs'), label_size = 12)

missing_values_plot
```

**I looked at each plot and above are the two data sets with missing values**

### employment type

```{r}
emp_counts <- table(learn$emp_type)
emp_proportions <- prop.table(emp_counts)
emp_df <- as.data.frame(emp_proportions)
colnames(emp_df) <- c("emp", "Proportion")


ggplot(emp_df, aes(x = emp, y = Proportion, fill = emp)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::percent) +
  labs(
    title = "Maximum - Emplois sans limite de durée, CDI, titulaire de la fonction publique",
    x = "Emp Type",
    y = "Proportion"
  ) +
  theme_minimal()
```

# Test

## Load Test Data

```{r}
test <- vroom(here("Data - source", "project-10-files", "test_dataset.csv"), delim = ",", show_col_types = FALSE)
test_emp_type <- vroom(here("Data - source", "project-10-files", "test_dataset_emp_type.csv"), delim = ",", show_col_types = FALSE)
test_job <- vroom(here("Data - source", "project-10-files", "test_dataset_job.csv"), delim = ",", show_col_types = FALSE)
test_retired_former <- vroom(here("Data - source", "project-10-files", "test_dataset_retired_former.csv"), delim = ",", show_col_types = FALSE)
test_retired_jobs <- vroom(here("Data - source", "project-10-files", "test_dataset_retired_jobs.csv"), delim = ",", show_col_types = FALSE)
test_retired_pension <- vroom(here("Data - source", "project-10-files", "test_dataset_retired_pension.csv"), delim = ",", show_col_types = FALSE)
test_sports <- vroom(here("Data - source", "project-10-files", "test_dataset_sport.csv"), delim = ",", show_col_types = FALSE)
```

## Combine Test Data

```{r}
test <- test %>%
  left_join(test_emp_type, by = "PRIMARY_KEY") |>
  left_join(test_job, by = "PRIMARY_KEY") |>
  left_join(test_retired_former, by = "PRIMARY_KEY") |>
  left_join(test_retired_jobs, by = "PRIMARY_KEY") |>
  left_join(test_retired_pension, by = "PRIMARY_KEY") |>
  left_join(test_sports, by = "PRIMARY_KEY")
```
